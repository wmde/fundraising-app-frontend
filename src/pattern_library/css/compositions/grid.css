/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with configurable grid item sizes

The grid will distribute its child elements evenly into rows and columns. It will try to fit all items into one row, but will create
new rows and distribute the items across the rows, until each item in a row is at least --grid-min-item-size units wide.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
	display: grid;
	grid-template-columns: repeat(var(--grid-placement, auto-fill), minmax(var(--grid-min-item-size, 16rem), 1fr));
	gap: var(--gutter, var(--space-l));
}

/* A split 50/50 layout that sizes */
.grid[data-layout='50-50'] {
	--grid-placement: auto-fit;
	--grid-min-item-size: clamp(8rem, 50vw, 24rem);
}

.grid[data-layout='full'] {
	--grid-min-item-size: 100%;
}

.grid[data-layout='halves'] {
	--grid-placement: auto-fit;
	--grid-min-item-size: clamp(10rem, 40%, 24rem);
}

/* Three column grid layout */
.grid[data-layout='thirds'] {
	--grid-placement: auto-fit;
	--grid-min-item-size: clamp(16rem, 33%, 20rem);
}

.grid[data-layout='quarters'] {
	--grid-min-item-size: clamp(5rem, 20%, 18rem);
}

.grid__item-full-width {
	grid-column-start: 1;
	grid-column-end: -1;
}
