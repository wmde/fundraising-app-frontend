body {
	background: var(--color-blue-100);
	color: var(--color-grey-800);
	font-size: var(--type-step-0);
	font-family: var(--font-base);
	line-height: var(--leading-standard);
	font-size-adjust: from-font;
	margin: 0;
	padding-top: calc(var(--navigation-height) + var(--gutter));
}

:is(h1, h2, h3) {
	line-height: var(--leading-fine);
	text-wrap: balance;
	font-weight: var(--font-normal);
}

h1 {
	font-size: var(--type-step-3);
	max-width: 20ch;
}

h2 {
	font-size: var(--type-step-2);
	max-width: 35ch;
}

h3 {
	font-size: var(--type-step-1);
	max-width: 35ch;
}

:is(h4, h5, h6) {
	font-size: var(--type-step-0);
	font-weight: var(--font-normal);
}

small {
	font-size: var(--type-step-00);
}

ins {
	text-decoration: none;
	background: var(--color-primary);
	color: var(--color-dark);
	padding-inline: 0.3em;
}

:is(code, kbd, samp) {
	font-family: var(--font-mono);
	padding: 0.2em 0.2em 0.05em 0.2em;
	hyphens: none;
	tab-size: 2;
	text-align: left;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;
	box-decoration-break: clone;
}

/* This is quite a new property, so we want code styles to at least, not be huge or tiny */
@supports not (font-size-adjust: from-font) {
	:is(code, kbd, samp) {
		font-size: 0.8em;
	}
}

pre {
	width: max-content;
	max-width: 100%;
	overflow-x: auto;
	background: var(--color-grey-100);
	padding: var(--flow-space, 1em);
	tab-size: 4ch;
}

pre code {
	border: none;
	background: none;
	padding: 0;
}

kbd {
	border: 1px solid;
	padding-block-end: 0.1em;
}

var {
	font-style: normal;
	font-weight: var(--font-normal);
}

ul:not([class]) {
	padding-inline-start: 1.7ch;
	list-style-type: disc;
}

ul:not([class]) > li {
	padding-inline-start: 0.9ch;
}

ol:not([class]) {
	padding-inline-start: 2.1ch;
}

ol:not([class]) > li {
	padding-inline-start: 0.5ch;
}

:is(ol, ul):not([class]) li + * {
	margin-block-start: var(--flow-space, var(--space-2xs));
}

ul ::marker {
	font-size: 0.8lh;
}

ol ::marker {
	font-size: 1em;
	font-weight: var(--font-bold);
}

dt {
	font-weight: var(--font-normal);
}

dt + dd {
	margin-block-start: var(--space-xs);
}

dd + dt {
	margin-block-start: var(--space-s);
}

dd {
	margin-inline-start: 1.5ch;
}

blockquote {
	margin-inline: 0;
	color: var(--color-light);
}

blockquote footer {
	margin-block-start: var(--space-s);
}

blockquote q {
	font-style: normal;
}

q {
	display: inline-block;
	font-style: italic;
}

q:before {
	content: "\201C";
}

q:after {
	content: "\201D";
}

:is(video, iframe[src*='youtube'], iframe[src*='vimeo']) {
	display: block;
	width: 100%;
	height: auto;
	aspect-ratio: 16/9;
}

img {
	height: auto;
	max-width: 100%;
	display: block;
}

figure {
	margin-inline: var(--space-s);
}

figcaption {
	padding-block-start: 0.5em;
	font-size: var(--size-step-0);
	font-family: monospace;
}

table {
	border: var(--stroke);
	border-collapse: collapse;
	width: 100%;
}

th {
	text-align: left;
	font-weight: var(--font-bold);
	line-height: var(--leading-fine);
}

thead th {
	padding-block: var(--space-s);
}

td,
th {
	padding: var(--space-xs) var(--space-s);
}

th:not(:only-of-type) {
	border-block-end: var(--stroke);
}

th:only-of-type {
	border-inline-end: var(--stroke);
}

:is(th, td) ~ :is(th, td) {
	border-inline-start: var(--stroke);
}

tr + tr :is(th, td) {
	border-block-start: var(--stroke);
}

caption {
	caption-side: bottom;
	margin-block-start: var(--space-s);
}

a:not([class]) {
	color: var(--color-blue-600);
}

a:not([class]):hover {
	color: var(--color-grey-800);
}

:is(h1, h2, h3, h4) a:not([class]) {
	text-decoration-thickness: 0.1ex;
	text-underline-offset: 0.2ex;
}

:is(h1, h2, h3, h4) a:not([class]):hover {
	text-underline-offset: 0.3ex;
}

:focus {
	outline: none;
}

:focus-visible {
	outline: 2px solid var(--focus-color, currentColor);
	outline-offset: var(--focus-offset, 0.2lh);
}

/* Firefox is the only browser that doesn't outline the whole element unless you make it display: inline-block. That in itself causes multiple flow issues so we can detect it, using its own vendor prefix and reduce focus offset
*/
@supports (-moz-appearance: none) {
	:root {
		--focus-offset: 0.08em;
	}
}

:target {
	scroll-margin-block: 5lh;
}

::selection {
	color: var(--color-black);
	background: var(--color-blue-200);
}

/* TODO: Think about how to handle margin bottom in a flow element */
hr {
	border: none;
	border-block-start: var(--hr-stroke, var(--stroke));
	margin-block: var(--flow-space, var(--space-xl));
}

svg {
	flex-shrink: 0;
}

svg[role='img'][width][height] {
	width: revert;
	height: revert;
	background: var(--color-light);
	padding: var(--space-xs);
}

/* There's a .flow composition, but this prevents forms from having to have that applied where markup is harder to control in certain systems. It still uses the --flow-space variables though to make managing space easier */
form > * + * {
	margin-top: var(--flow-space, 1rem);
}

:is(input, select, textarea) {
	accent-color: var(--color-primary);
}

:is(input:not([type='checkbox'], [type='radio'], [type='color']), select, textarea) {
	padding: 0.5em 0.8em;
	border-radius: var(--radius-s);
	border: var(--stroke-solid);
	background: var(--color-dark-glare);
	color: var(--color-light);
	width: 100%;

	&::placeholder {
		color: var(--color-mid);
		opacity: 1;
	}
}

label {
	line-height: var(--leading-fine);
	font-weight: var(--font-normal);
}

label::after {
	content: '\A';
	white-space: pre;
}

/* Usually label wraps checkbox and radio buttons, so we give ourselves more layout and text-flow control with flex */
label:has(input) {
	display: flex;
	align-items: baseline;
	gap: var(--space-s);
	font-weight: var(--font-normal);
}

/* Slightly adjusts the vertical position of the check/radio */
label:has(input) input {
	transform: translateY(-0.1ex);
}

input:disabled {
	background: var(--color-mid);
}

input:disabled,
label input:disabled + * {
	cursor: not-allowed;
}

fieldset {
	border: var(--stroke);
	padding: var(--space-s);
}

button:not([disabled]) {
	cursor: pointer;
}

legend {
	font-weight: var(--font-normal);
	padding-inline: var(--space-xs);
}

summary {
	cursor: pointer;
}

details[open] summary {
	margin-block-end: var(--space-2xs);
}

dialog {
	margin-inline: auto;
	max-height: calc(100vh - var(--space-0-s) * 2);
	max-width: 40rem;
	min-width: 10rem;
	border: 0;
}

dialog::backdrop {
	background: var(--color-black-transparent-80);
}
